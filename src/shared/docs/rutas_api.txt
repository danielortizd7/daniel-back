DOCUMENTACIÓN DE RUTAS API - LABORATORIO
=====================================

URLs Base:
- Desarrollo: http://localhost:5000/api
- Producción: https://back-usuarios-f.onrender.com/api

1. AUTENTICACIÓN Y USUARIOS
--------------------------

1.1. Login
POST /auth/login
Headers: No requiere
Body:
{
    "email": "string",
    "password": "string"
}
Response:
{
    "success": true,
    "data": {
        "token": "string",
        "usuario": {
            "documento": "string",
            "nombre": "string",
            "email": "string",
            "tipo": "string"
        }
    }
}

1.2. Registro de Cliente
POST /usuarios
Headers: No requiere
Body:
{
    "nombre": "string",
    "documento": "string",
    "telefono": "string",
    "direccion": "string",
    "email": "string",
    "password": "string",
    "razonSocial": "string"
}
Response:
{
    "success": true,
    "message": "Usuario registrado exitosamente",
    "usuario": {
        "documento": "string",
        "nombre": "string",
        "email": "string"
    }
}

1.3. Buscar Usuario por Documento
GET /usuarios/{documento}
Headers:
- Authorization: Bearer {token}
- X-Usuario-Documento: {documento}
Response:
{
    "success": true,
    "usuario": {
        "documento": "string",
        "nombre": "string",
        "email": "string",
        "telefono": "string",
        "direccion": "string",
        "razonSocial": "string"
    }
}

1.4. Verificar Token
GET /auth/verificar-token
Headers:
- Authorization: Bearer {token}
- X-Usuario-Documento: {documento}
Response:
{
    "valid": true,
    "usuario": {
        "documento": "string",
        "nombre": "string"
    }
}

2. MUESTRAS
-----------

2.1. Obtener Todas las Muestras
GET /muestras
Headers:
- Authorization: Bearer {token}
- X-Usuario-Documento: {documento}
Response:
{
    "success": true,
    "muestras": [
        {
            "_id": "string",
            "documento": "string",
            "tipoMuestra": "string",
            "fechaHora": "string",
            "estado": "string"
        }
    ]
}

2.2. Obtener Muestra por ID
GET /muestras/{id}
Headers:
- Authorization: Bearer {token}
- X-Usuario-Documento: {documento}
Response:
{
    "success": true,
    "muestra": {
        "_id": "string",
        "documento": "string",
        "tipoMuestra": "string",
        "tipoMuestreo": "string",
        "fechaHora": "string",
        "lugarMuestreo": "string",
        "estado": "string",
        "analisisSeleccionados": ["string"],
        "historial": [
            {
                "estado": "string",
                "fechaCambio": "string",
                "observaciones": "string"
            }
        ]
    }
}

2.3. Registrar Nueva Muestra
POST /muestras
Headers:
- Authorization: Bearer {token}
- X-Usuario-Documento: {documento}
Body:
{
    "documento": "string",
    "tipoMuestra": "Agua" | "Suelo",
    "tipoMuestreo": "Simple" | "Compuesto",
    "fechaHora": "2024-01-10T10:00:00",
    "lugarMuestreo": "string",
    "planMuestreo": "string",
    "condicionesAmbientales": "string",
    "preservacionMuestra": "Refrigeración" | "Congelación" | "Temperatura Ambiente",
    "identificacionMuestra": "string",
    "analisisSeleccionados": ["string"],
    "tipoDeAgua": {
        "tipo": "potable" | "natural" | "residual" | "otra",
        "tipoPersonalizado": "string",
        "descripcion": "string"
    }
}
Response:
{
    "success": true,
    "message": "Muestra registrada exitosamente",
    "data": {
        "_id": "string",
        "documento": "string",
        "estado": "Recibida"
    }
}

2.4. Actualizar Estado de Muestra
PATCH /muestras/{id}/estado
Headers:
- Authorization: Bearer {token}
- X-Usuario-Documento: {documento}
Body:
{
    "estado": "Recibida" | "En análisis" | "Pendiente de resultados" | "Finalizada" | "Rechazada",
    "observaciones": "string"
}
Response:
{
    "success": true,
    "message": "Estado actualizado exitosamente",
    "muestra": {
        "_id": "string",
        "estado": "string",
        "historial": [
            {
                "estado": "string",
                "fechaCambio": "string",
                "observaciones": "string"
            }
        ]
    }
}

3. TIPOS DE AGUA
---------------

3.1. Obtener Tipos de Agua
GET /tipos-agua
Headers:
- Authorization: Bearer {token}
- X-Usuario-Documento: {documento}
Response:
{
    "success": true,
    "tipos": [
        {
            "id": "string",
            "nombre": "string",
            "descripcion": "string"
        }
    ]
}

4. CAMBIOS DE ESTADO
-------------------

4.1. Obtener Historial de Cambios
GET /cambios-estado
Headers:
- Authorization: Bearer {token}
- X-Usuario-Documento: {documento}
Response:
{
    "success": true,
    "cambios": [
        {
            "muestraId": "string",
            "estado": "string",
            "fechaCambio": "string",
            "observaciones": "string"
        }
    ]
}

4.2. Registrar Cambio de Estado
POST /cambios-estado
Headers:
- Authorization: Bearer {token}
- X-Usuario-Documento: {documento}
Body:
{
    "muestraId": "string",
    "estado": "string",
    "observaciones": "string"
}
Response:
{
    "success": true,
    "message": "Cambio de estado registrado",
    "cambio": {
        "muestraId": "string",
        "estado": "string",
        "fechaCambio": "string"
    }
}

EJEMPLOS DE USO
==============

1. Flujo de Registro y Login
---------------------------

1.1. Registrar Cliente:
POST http://localhost:5000/api/usuarios
{
    "nombre": "Usuario Prueba",
    "documento": "123456789",
    "email": "prueba@email.com",
    "password": "123456",
    "telefono": "1234567890",
    "direccion": "Dirección de prueba",
    "razonSocial": "Empresa Prueba"
}

1.2. Login:
POST http://localhost:5000/api/auth/login
{
    "email": "prueba@email.com",
    "password": "123456"
}

2. Flujo de Registro de Muestra
------------------------------

2.1. Registrar Muestra de Agua:
POST http://localhost:5000/api/muestras
{
    "documento": "123456789",
    "tipoMuestra": "Agua",
    "tipoMuestreo": "Simple",
    "fechaHora": "2024-01-10T10:00:00",
    "lugarMuestreo": "Lugar de prueba",
    "preservacionMuestra": "Refrigeración",
    "analisisSeleccionados": ["pH", "Conductividad"],
    "tipoDeAgua": {
        "tipo": "potable"
    }
}

2.2. Actualizar Estado:
PATCH http://localhost:5000/api/muestras/{id}/estado
{
    "estado": "En análisis",
    "observaciones": "Iniciando análisis de la muestra"
}

NOTAS IMPORTANTES
===============
1. Todas las rutas protegidas requieren los headers de autenticación
2. El token se obtiene al hacer login y debe incluirse en el header Authorization
3. El documento del usuario debe incluirse en el header X-Usuario-Documento
4. Los estados de las muestras siguen el flujo: 
   Recibida → En análisis → Pendiente de resultados → Finalizada/Rechazada
5. Todos los timestamps deben enviarse en formato ISO (YYYY-MM-DDTHH:mm:ss) 

# API ROUTES Y EJEMPLOS DE CONSUMO

## Headers Requeridos para todas las rutas protegidas
```javascript
headers: {
  'Authorization': 'Bearer ' + token,  // Token JWT
  'Content-Type': 'application/json',
  'X-Usuario-Documento': 'documento_usuario'  // Documento del usuario autenticado
}
```

## IMPLEMENTACIÓN DE FIRMAS EN EL FRONTEND

### 1. Instalar Dependencias
```bash
npm install react-signature-canvas @types/react-signature-canvas
```

### 2. Componente de Firma Individual (SignaturePad.tsx)
```typescript
import React, { useRef, useState } from 'react';
import SignatureCanvas from 'react-signature-canvas';
import { Button, Box, Typography } from '@mui/material';

interface SignaturePadProps {
  onSave: (firma: string) => void;
  titulo: string;
  disabled?: boolean;
}

const SignaturePad: React.FC<SignaturePadProps> = ({ onSave, titulo, disabled = false }) => {
  const sigPad = useRef<any>(null);
  const [firmado, setFirmado] = useState(false);

  const limpiar = () => {
    sigPad.current?.clear();
    setFirmado(false);
  };

  const guardar = () => {
    if (!sigPad.current?.isEmpty()) {
      const firmaBase64 = sigPad.current
        .getTrimmedCanvas()
        .toDataURL('image/png');
      onSave(firmaBase64);
      setFirmado(true);
    }
  };

  if (disabled) {
    return (
      <Box sx={{ border: '1px solid #ccc', p: 2, my: 2, opacity: 0.7 }}>
        <Typography variant="h6" gutterBottom>
          {titulo}
        </Typography>
        <Box sx={{ p: 4, textAlign: 'center', bgcolor: '#f5f5f5' }}>
          <Typography color="textSecondary">
            No tienes permisos para firmar aquí
          </Typography>
        </Box>
      </Box>
    );
  }

  return (
    <Box sx={{ border: '1px solid #ccc', p: 2, my: 2 }}>
      <Typography variant="h6" gutterBottom>
        {titulo}
      </Typography>
      <Box sx={{ border: '1px solid #eee', mb: 2 }}>
        <SignatureCanvas
          ref={sigPad}
          canvasProps={{
            width: 500,
            height: 200,
            className: 'firma-canvas'
          }}
        />
      </Box>
      <Box sx={{ display: 'flex', gap: 2 }}>
        <Button variant="outlined" onClick={limpiar} disabled={firmado}>
          Limpiar
        </Button>
        <Button 
          variant="contained" 
          onClick={guardar}
          disabled={firmado}
        >
          Guardar Firma
        </Button>
      </Box>
    </Box>
  );
};

export default SignaturePad;
```

### 3. Implementación en RegistroMuestras.tsx
```typescript
import { useState, useContext } from 'react';
import SignaturePad from './components/SignaturePad';
import { AuthContext } from '../context/AuthContext'; // Asume que tienes un contexto de autenticación

interface Firma {
  cedula: string;
  firma: string;
}

const RegistroMuestras = () => {
  const { usuario } = useContext(AuthContext); // Obtiene el usuario actual
  const [firmaAdmin, setFirmaAdmin] = useState<Firma | null>(null);
  const [firmaCliente, setFirmaCliente] = useState<Firma | null>(null);
  const [error, setError] = useState<string>('');

  const esAdministrador = usuario?.rol === 'administrador';
  const esCliente = usuario?.rol === 'cliente';

  const guardarFirmaAdmin = (firma: string) => {
    if (!esAdministrador) {
      setError('Solo los administradores pueden firmar aquí');
      return;
    }
    setFirmaAdmin({
      cedula: usuario.documento,
      firma: firma
    });
    setError('');
  };

  const guardarFirmaCliente = (firma: string) => {
    if (!esCliente) {
      setError('Solo los clientes pueden firmar aquí');
      return;
    }
    setFirmaCliente({
      cedula: usuario.documento,
      firma: firma
    });
    setError('');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      if (!firmaAdmin || !firmaCliente) {
        setError('Se requieren ambas firmas para registrar la muestra');
        return;
      }

      const datosMuestra = {
        // ... otros datos de la muestra ...
        firmas: {
          cedulaLaboratorista: firmaAdmin.cedula,
          firmaLaboratorista: firmaAdmin.firma,
          cedulaCliente: firmaCliente.cedula,
          firmaCliente: firmaCliente.firma,
        }
      };

      const response = await muestrasService.registrarMuestra(datosMuestra);
      // Manejar respuesta exitosa
    } catch (error) {
      setError(`Error al registrar muestra: ${error.message}`);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* ... otros campos del formulario ... */}
      
      <Box sx={{ mt: 3 }}>
        <Typography variant="h6">Firmas</Typography>
        
        {/* Firma del Administrador */}
        <SignaturePad
          onSave={guardarFirmaAdmin}
          titulo="Firma del Administrador"
          disabled={!esAdministrador}
        />

        {/* Firma del Cliente */}
        <SignaturePad
          onSave={guardarFirmaCliente}
          titulo="Firma del Cliente"
          disabled={!esCliente}
        />

        {error && (
          <Alert severity="error" sx={{ mt: 2 }}>
            {error}
          </Alert>
        )}
      </Box>

      <Button
        type="submit"
        variant="contained"
        color="primary"
        disabled={!firmaAdmin || !firmaCliente}
        sx={{ mt: 3 }}
      >
        Registrar Muestra
      </Button>
    </form>
  );
};

export default RegistroMuestras;
```

### 4. Estilos CSS
```css
.firma-canvas {
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  touch-action: none;
}

.firma-canvas canvas {
  width: 100%;
  height: 100%;
}
```

### 5. Consideraciones de Seguridad

1. **Control de Acceso**:
   - Solo el administrador puede ver y usar el pad de firma de administrador
   - Solo el cliente puede ver y usar el pad de firma de cliente
   - Las firmas se validan en el backend según el rol del usuario

2. **Validaciones**:
   - Se verifica el rol del usuario antes de permitir firmar
   - No se puede modificar una firma una vez guardada
   - Se requieren ambas firmas para completar el registro

3. **Proceso de Firma**:
   - El administrador debe estar autenticado para firmar su parte
   - El cliente debe estar autenticado para firmar su parte
   - Las firmas se guardan con timestamp y datos del firmante

### 6. Ejemplo de Respuesta del Backend
```javascript
{
  "success": true,
  "message": "Muestra registrada exitosamente",
  "data": {
    "muestra": {
      "_id": "...",
      "id_muestra": "MUESTRA-H114",
      "firmas": {
        "administrador": {
          "cedula": "11223344",
          "nombre": "Nombre del Administrador",
          "firma": "data:image/png;base64,...",
          "fechaFirma": "2024-03-23T19:56:39.089Z"
        },
        "cliente": {
          "cedula": "86565566",
          "nombre": "Nombre del Cliente",
          "firma": "data:image/png;base64,...",
          "fechaFirma": "2024-03-23T19:56:39.089Z"
        }
      }
    }
  }
} 